#!/usr/bin/env python
"""
A simple command line wrapper around the genetic algorithm used for finding
valid solutions to species counterpoint problems.
"""

import argparse
import logging

from foox import ga, version, lilypond, words
from foox.species import first, second


parser = argparse.ArgumentParser(
    description='Evolves valid solutions to species counterpoint problems.')
parser.add_argument('--version', action='version',
    version=version.get_version())
parser.add_argument('-v', '--verbose', help='increased amount of verbosity',
    action='store_true')
parser.add_argument('-s', '--species', help='indicated species to use (1-5)',
    required=True, type=int)
parser.add_argument('-cf', '--cantus-firmus', help='specify the cantus firmus',
    nargs='*', required=True)
parser.add_argument('-o', '--out', help='name the output file')


if __name__ == '__main__':
    args = parser.parse_args()
    cf = [int(x) for x in args.cantus_firmus]
    species = args.species
    output = 'out'
    if args.out:
        output = args.out

    population_size = 1000
    mutation_range = 7
    mutation_rate = 0.4
    if species == 1:
        module = first
    elif species == 2:
        module = second

    start_population = module.create_population(population_size, cf)
    fitness_function = module.make_fitness_function(cf)
    generate_function = module.make_generate_function(mutation_range,
        mutation_rate, cf)
    ga = ga.genetic_algorithm(start_population, fitness_function,
        generate_function, first.halt)
    fitness = 0.0
    for generation in ga:
        fitness = generation[0].fitness
        print fitness
        print generation[0]
    with open('%s.ly' % output, 'w') as output:
        output.write(lilypond.render(species, cf, generation[0].chromosome))
