#!/usr/bin/env python
"""
A simple command line wrapper around the genetic algorithm used for finding
valid solutions to species counterpoint problems.
"""

import argparse
import logging

from foox import ga, version, lilypond
from foox.species import first

parser = argparse.ArgumentParser(
    description='Evolves valid solutions to species counterpoint problems.')

parser.add_argument('--version', action='version',
    version=version.get_version())
parser.add_argument('-v', '--verbose', help='increased amount of verbosity',
    action='store_true')
parser.add_argument('-s', '--species', help='indicated species to use (1-5)',
    required=True, type=int)
parser.add_argument('-cf', '--cantus-firmus', help='specify the cantus firmus',
    nargs='*', required=True)
parser.add_argument('-o', '--out', help='name the output file')

if __name__ == '__main__':
    args = parser.parse_args()
    cf = [int(x) for x in args.cantus_firmus]
    start_population = first.create_population(1000, cf)
    fitness_function = first.make_fitness_function(cf)
    generate_function = first.make_generate_function(0.4, 6, cf)
    ga = ga.genetic_algorithm(start_population, fitness_function,
        generate_function, first.halt)
    fitness = 0.0
    for generation in ga:
        last_fitness = fitness
        fitness = generation[0].fitness
        print fitness
    fitness_function(generation[0])
    with open('out.ly', 'w') as output:
        output.write(lilypond.render(1, cf, generation[0].chromosome))
    # run lilypond
